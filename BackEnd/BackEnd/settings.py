"""
Django settings for BackEnd project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import sys
from datetime import timedelta
import os
from pathlib import Path
from google.oauth2 import service_account
from corsheaders.defaults import default_headers
from decouple import config
from google.cloud import storage

# Detectar si estamos en modo de pruebas
IS_TESTING = 'test' in sys.argv

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Configuración de la base de datos
if IS_TESTING:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'smartgym_test',  # Base de datos de pruebas
            'USER': 'postgres',
            'PASSWORD': 'Admin',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'smartgym',  # Nombre de la base de datos que creaste en pgAdmin
            # Usuario de PostgreSQL (por defecto suele ser 'postgres')
            'USER': 'postgres',
            'PASSWORD': 'Admin',  # Contraseña de PostgreSQL
            'HOST': 'localhost',  # Dirección del servidor de base de datos
            'PORT': '5432',  # Puerto de PostgreSQL (por defecto 5432)
        }
    }


GCS_CREDENTIALS_FILE = os.path.join(BASE_DIR, 'BackEnd', 'credentials.json')
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = GCS_CREDENTIALS_FILE

# Inicializa el cliente de Google Cloud Storage
STORAGE_CLIENT = storage.Client()

# Nombre del bucket
GCS_BUCKET_NAME = 'fitprox'

bucket = STORAGE_CLIENT.bucket('fitprox')

# Verifica si puedes acceder al bucket
print(f"Bucket name: {bucket.name}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dpf!)y5i@$q=_ha*$f%oyswk*2l=l20*#ub@o)x7^_k=71@^l*'

# SECURITY WARNING: don't run with debug turned on in production!
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'BackEnd', 'media/')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'drf_yasg',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'storages',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Debe estar antes del middleware común
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTH_USER_MODEL = 'api.User'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ALGORITHM': 'HS256',  # Debe coincidir con el `alg` en el HEADER
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),  # Define el tipo de cabecera permitido
    'USER_ID_FIELD': 'id',  # Cambia este valor si usas otro campo como identificador
    'USER_ID_CLAIM': 'user_id',
}

ROOT_URLCONF = 'BackEnd.urls'
'''
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, 'BackEnd', 'meta-router-439617-d1-641fbf138cf5.json')
)

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = 'firprox'  # Tu bucket de GCS
GS_PROJECT_ID = 'meta-router-439617-d1'  # Tu proyecto de GCS
GS_DEFAULT_ACL = 'publicRead'
MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
'''
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BackEnd.wsgi.application'


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8100",  # URL donde corre tu frontend de Ionic
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Authorization',
]


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
